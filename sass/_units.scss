//
// basic unit manipulation
// --------------------------------------------------------------------------

@function one($unit:'') {
  $one: ('em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, '%': 1%, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax, 'cm': 1cm, 'mm': 1mm, 'in': 1in, 'px': 1px, 'pt': 1pt, 'pc': 1pc, 'deg': 1deg, 'grad': 1grad, 'rad': 1rad, 'turn': 1turn, 's': 1s, 'ms': 1ms, 'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx);
  @return map-get($one, $unit) or 1;
}

@function strip($n) {
  @if not is-number($n) { @return error("cannot manipulate unit of non-number"); }
  @return if(unitless($n), $n, $n / one(unit($n)));
}

@function assert($n, $unit: '') {
  @if not is-number($n) { @return error("cannot manipulate unit of non-number"); }
  @return strip($n) * one($unit);
}

@function strip-alt($n){
  @if not is-number($n) { @return error("cannot manipulate unit of non-number"); }
  @return if(unitless($n), $n, $n / (0 * $n + 1));
}

//
// keyword manipulation
// --------------------------------------------------------------------------

@function opposite($dirs...) {
  @if length($dirs) == 1 and type-of(nth($dirs, 1)) == 'list' { @return opposite(nth($dirs, 1)...); }
  $out: (); $sep: list-separator($dirs);
  $opposites: ('top': bottom, 'right': left, 'bottom': top, 'left': right, 'ltr': rtl, 'rtl': ltr);
  @each $dir in $dirs {
    $opposite: if(type-of($dir) != 'list', map-get($opposites, $dir), opposite($dir...));
    @if $opposite {$out: append($out, $opposite, $sep); } }
  @return $out;
}

//
// viewport unit crazy shit
// --------------------------------------------------------------------------

// RELATIVIZE wrt MEDIA
@function relativize($val, $ref: 1) {
  $val-unit: unit($val); $ref-unit: unit($ref);
  $scale: medium-value('html-scale') or 1;
  // checks
  @if $ref-unit == '%' { @warn 'cannot relativize value to a relative reference; exiting'; @return $val; }
  @if index($ref-unit $val-unit, 'em') { @warn 'cannot reliably relativize to em reference; plz use rem'; }
  // corrections
  @if $val-unit == '%' { $ref: 100; }
  @else if $val-unit == 'px' and index('em' 'rem', $ref-unit) { $ref: unit-strip-alt($ref) * 16 * $scale; }
  @else if $ref-unit == 'px' and index('em' 'rem', $val-unit) { $ref: unit-strip-alt($ref) / 16 / $scale; }
  @else if not unitless($ref) { $ref: unit-strip-alt($ref); }
  @return unit-strip-alt($val) / $ref;
}

// OLD VERSION
// @function relativize($value, $reference: 1) {
//   $reference-unit: unit($reference);
//   $value-unit: unit($value);
//   // if reference unit is percent, warn and return value
//   @if $reference-unit == '%' { @warn 'cannot relativize to a relative reference'; @return $value; }
//   // if value is in percent it's already relative
//   @if $value-unit == '%' { $value: $value / 100%; }
//   // if the units are equal, or either is unitless, divide unit-stripped
//   @else if unitless($value) or unitless($reference) or $reference-unit == $value-unit { $value: unit-strip-alt($value) / unit-strip-alt($reference); }
//   // if reference is em/rem
//   @else if index('em' 'rem', $reference-unit) {
//     @if index('em' 'rem', $value-unit) { $value: unit-strip-alt($value) / unit-strip-alt($reference); }
//     @else { $value: unit-strip-alt($value) / unit-strip-alt($reference) / 16; }
//   }
//   // if reference is px
//   @else if $reference-unit == 'px' {
//     @if index('em' 'rem', $value-unit) { $value: unit-strip-alt($value) / unit-strip-alt($reference) * 16; }
//     @else { $value: unit-strip-alt($value) / unit-strip-alt($reference); }
//   }
//   @return $value;
// }

// VIEWPORT UNIT INTERPOLATION
// TODO: make the $unit argument functional
@function vx($base, $rate, $unit: 'vw') {
  $rel1: null;
  $brk1: null;
  $rel2: null;
  $brk2: null;

  @if type-of($base) == 'list' and length($base) > 1 {
    $brk1: nth($base, 2);
    $rel1: relativize(nth($base, 1), $brk1);

    @if type-of($rate) == 'list' {
      $brk2: relativize(nth($rate, 2), $brk1) * $brk1;
      $rel2: relativize(nth($rate, 1), $brk1);
      $rate: ($rel2 - $rel1) * $brk1 / ($brk2 - $brk1) * 100;

    }
    $rate: unit-strip-alt($rate);
    $base: ($rel1 - $rate/100) * $brk1;

  }
  $op: if($base < 0, '-', '+');
  @return calc(#{$rate * 1vw} #{$op} #{abs($base)});
}

// BETA
// @function vx($rate, $base: 0, $vunit: 1vw) {
//   $relbase1: null;
//   $break1: null;
//   $relbase2: null;
//   $break2: null;
//   @if type-of($base) == 'list' {
//     $break1: nth($base, 2);
//     // relativize base relative to break1
//     $relbase1: relativize(nth($base, 1), $break1);
//     @if type-of($rate) == 'list' {
//       // resolve break2 in units of break1
//       $break2: relativize(nth($rate, 2), $break1) * $break1;
//       // resolve base2 in units of break1
//       $relbase2: relativize(nth($rate, 1), $break1);
//       // resolve rate in units of break2-break1
//       $rate: ($relbase2 - $relbase1) * $break1 / ($break2 - $break1) * 100;
//     }
//     $rate: unit-strip-alt($rate);
//     $base: ($relbase1 - $rate/100) * $break1;
//   }
//   @return calc(#{$rate * $vunit} + #{$base})
//   // @return '
//   //   base: #{$base},
//   //   rate: #{$rate},
//   //   break-1 #{$break1},
//   //   break-2: #{$break2}
//   // ';
// }

// @function vwx($rate, $base:0) { @return vx($rate, $base, 1vw); }
// @function vhx($rate, $base:0) { @return vx($rate, $base, 1vh); }

//        _                                _                      _ _
//       (_)                              | |                    (_) |
// __   ___  _____      ___ __   ___  _ __| |_ ______ _   _ _ __  _| |_ ___
// \ \ / / |/ _ \ \ /\ / / '_ \ / _ \| '__| __|______| | | | '_ \| | __/ __|
//  \ V /| |  __/\ V  V /| |_) | (_) | |  | |_       | |_| | | | | | |_\__ \
//   \_/ |_|\___| \_/\_/ | .__/ \___/|_|   \__|       \__,_|_| |_|_|\__|___/
//                       | |
//                       |_|

@function vx($rate, $base: 0, $vunit: 1vw) {
  $relbase1: null;
  $break1: null;
  $relbase2: null;
  $break2: null;
  @if type-of($base) == 'list' {
    $break1: nth($base, 2);
    // relativize base relative to break1
    $relbase1: relativize(nth($base, 1), $break1);
    @if type-of($rate) == 'list' {
      // resolve break2 in units of break1
      $break2: relativize(nth($rate, 2), $break1) * $break1;
      // resolve base2 in units of break1
      $relbase2: relativize(nth($rate, 1), $break1);
      // resolve rate in units of break2-break1
      $rate: ($relbase2 - $relbase1) * $break1 / ($break2 - $break1) * 100;
    }
    $rate: unit-strip-alt($rate);
    $base: ($relbase1 - $rate/100) * $break1;
  }
  @return calc(#{$rate * $vunit} + #{$base})
  // @return '
  //   base: #{$base},
  //   rate: #{$rate},
  //   break-1 #{$break1},
  //   break-2: #{$break2}
  // ';
}

@function vwx($rate, $base:0) { @return vx($rate, $base, 1vw); }
@function vhx($rate, $base:0) { @return vx($rate, $base, 1vh); }

// TODO: viewport units
// - add an extra variable to `vx` function, to allow an arbitrary other element inserted in to the calc expression
//   - NB this will allow vx-based typo-margins, for example, by inserting `trim-height()`